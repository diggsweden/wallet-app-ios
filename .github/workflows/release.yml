name: Release

on:
  push:
    branches: [main]

jobs:
  archive-and-upload:
    runs-on: ${{ vars.MACOS_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-env
        with:
          xcode-version: ${{ vars.XCODE_VERSION }}

      - name: 🔐 Install distribution certificate and provisioning profile
        env:
          CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSPHRASE: ${{ secrets.CERTIFICATE_PASSPHRASE }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH="$RUNNER_TEMP/certificate.p12"
          PP_PATH="$RUNNER_TEMP/pp.mobileprovision"
          KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"

          echo -n "$CERTIFICATE_BASE64" | base64 --decode -o "$CERTIFICATE_PATH"
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode -o "$PP_PATH"

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          security import "$CERTIFICATE_PATH" -P "$CERTIFICATE_PASSPHRASE" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PP_PATH" ~/Library/MobileDevice/Provisioning\ Profiles

      - name: 📦 Archive app
        run: |
          set -o pipefail

          mkdir -p build

          xcodebuild archive \
            -scheme "Wallet Demo" \
            -configuration Release \
            -archivePath build/walletdemo.xcarchive \
            -destination 'generic/platform=iOS' \
          | xcbeautify

      - name: 📤 Export .ipa
        env:
          EXPORT_OPTIONS_BASE64: ${{ vars.EXPORT_OPTIONS_BASE64 }}
        run: |
          set -o pipefail

          echo "$EXPORT_OPTIONS_BASE64" | base64 --decode > export-options.plist

          xcodebuild -exportArchive \
            -archivePath build/walletdemo.xcarchive \
            -exportPath build/export \
            -exportOptionsPlist export-options.plist \
          | xcbeautify

      - name: 🚀 Deploy to App Store (Testflight)
        env:
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_PRIVATE_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY_BASE64 }}
        run: |
          set -o pipefail

          mkdir -p private_keys
          echo -n "$APP_STORE_CONNECT_API_PRIVATE_KEY_BASE64" | base64 --decode -o "private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8"

          xcrun altool \
          --output-format xml \
          --upload-app  \
          --file build/export/walletdemo.ipa  \
          --type ios  \
          --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
          --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"
